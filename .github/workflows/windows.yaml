name: "Windows [Clang-cl & MSVC]"

on:
  push:
    branches: ["master"]
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/windows.yaml'
  pull_request:
    paths:
      - '**.c'
      - '**.cpp'
      - '**.h'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/windows.yaml'

jobs:
  build:
    if: github.repository != 'TBlauwe/cpp_lib_starter'
    name: "[${{matrix.os}}] : ${{matrix.architecture}}-${{matrix.configuration}}-${{matrix.toolchain}}"

    strategy:
      matrix:
        os: [windows-latest]
        architecture: [x64]
        configuration: [release]
        toolchain: [clang-cl, msvc]

    runs-on: ${{ matrix.os }}

    env:
        preset_name: ${{matrix.architecture}}-${{matrix.configuration}}-${{matrix.toolchain}} 
        build_directory: ./out/build/${{matrix.architecture}}-${{matrix.configuration}}-${{matrix.toolchain}} 
        CPM_SOURCE_CACHE: ${{github.workspace}}/.cpm_cache

    steps:
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: 'CMakeLists.txt'

    - name: "Cache CPM dependencies" 
      if: steps.check_files.outputs.files_exists == 'true'
      uses: actions/cache@v3
      with:
        path: ${{ env.CPM_SOURCE_CACHE }}
        key: cpm-${{ hashFiles('**/*.cmake', '**/CMakeLists.txt') }}
        enableCrossOsArchive: true

    - name: "Install msvc"
      if: steps.check_files.outputs.files_exists == 'true'
      uses: ilammy/msvc-dev-cmd@v1

    - name: "Install CMake and Ninja"
      if: steps.check_files.outputs.files_exists == 'true'
      uses: lukka/get-cmake@latest

    - name: Build
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
          cmake --preset ${{ env.preset_name }}
          cmake --build ${{ env.build_directory }} --target tests

    - name: Run tests
      if: steps.check_files.outputs.files_exists == 'true'
      working-directory: ${{ env.build_directory }}
      run: |
          ctest
